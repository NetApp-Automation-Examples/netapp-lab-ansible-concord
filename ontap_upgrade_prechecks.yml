---
- name: Run Through Pre-Checks Before Upgrading ONTAP   
  hosts: "{{ ansible_limit }}"
  gather_facts: no
  connection: 'local'
  collections:
    - netapp.ontap
  vars:
    health_fails: []
    health_warns: []
    cluster_rings: ['vldb','mgmt','vifmgr','bcomd','crs']
    login: &login
      hostname: "{{ ontap_hostname }}"
      username: "{{ ontap_username }}"
      password: "{{ ontap_password }}"
      https: "{{ https }}"
      validate_certs: "{{ validate_certs }}"

  tasks:
    - name: Check for bad disks
      include_tasks: tasks/ontap_get_cluster_info_rest.yml
      vars: 
        gather_subset: ['storage/disks'] #'protocols/san/igroups', 'cluster/nodes', 
        parameters:
          container_type: "broken|maintenance"
          state: "pending|reconstructing"
    
    - name: Log of bad disks check
      ansible.builtin.debug:
        var: ontap_rest_info['storage/disks']

    - name: Fail playbook for any bad disks present
      ansible.builtin.set_fact: 
        health_fails: "{{ health_fails + ['There are broken disks.'] }}" 
      when: ontap_rest_info['storage/disks']['num_records'] > 0 
        
    - name: >
            Basic health check pt 1
            (health alert show)
      netapp.ontap.na_ontap_rest_cli: 
        <<: *login
        command: 'system/health/alert'
        verb: "GET"
      register: verify_health_alerts
        
    - name: Log of verify_health_alerts
      ansible.builtin.debug: 
        var: verify_health_alerts

    - name: Fail playbook if there are health alerts
      ansible.builtin.set_fact: 
        health_fails: >
          "{{ health_fails + ['There are health alerts that need to be addressed.'] }}" 
      when: verify_health_alerts.msg.num_records > 0

    - name: >
            Basic health check pt 2
            (health subsystem show)
      netapp.ontap.na_ontap_rest_cli: 
        <<: *login
        command: 'system/health/subsystem'
        params: 
          fields: "health"
        verb: "GET"
      register: verify_health_subsystems

    - name: Log of verify_health_subsystems
      ansible.builtin.debug: 
        var: verify_health_subsystems

    - name: Fail playbook if there are subsystems degraded 
      ansible.builtin.set_fact: 
        health_fails: >
          "{{ health_fails + ['There are degraded subsystems that need to be addressed.'] }}" 
      when: verify_health_subsystems.msg.records|selectattr('health','!=','ok')|list|length > 0

    - block: 
      - name: Get cluster, node, aggr, vol, svm, network interfaces, and SAN info
        include_tasks: tasks/ontap_get_cluster_info_rest.yml
        vars: 
          gather_subset: 
            - cluster
            - cluster/nodes
            - protocols/san/igroups
            - aggregate_info
            - volume_info
            - vserver_info
            - network/ip/interfaces
          parameters:
            fields: ['*']

      - name: Set various cluster info facts
        ansible.builtin.set_fact: 
          cluster_info: "{{ ontap_rest_info['cluster'] }}"
          cluster_node_count: "{{ ontap_rest_info['cluster/nodes']['num_records'] }}"
          cluster_nodes: "{{ ontap_rest_info['cluster/nodes']['records'] }}"
          san_igroups_count: "{{ ontap_rest_info['protocols/san/igroups']['num_records'] }}"
          aggregate_info: "{{ ontap_rest_info['storage/aggregates']['records'] }}"
          volume_info: "{{ ontap_rest_info['storage/volumes']['records'] }}"
          vserver_info: "{{ ontap_rest_info['svm/svms']['records'] }}"
          net_int: "{{ ontap_rest_info['network/ip/interfaces']['records'] }}"
      tags: 
      - onlyrunme

    - name: Log of cluster node count and igroup count 
      ansible.builtin.debug:
        msg: "{{ item }}"
      loop:
      - "cluster_node_count = {{ cluster_node_count }}"
      - "san_igroups_count = {{ san_igroups_count }}"
    
    - name: The value in CPU and Disk Util should not exceed 50%
      netapp.ontap.na_ontap_ssh_command:
        <<: *login
        command: statistics show-periodic -iterations 10
        privilege: adv
        accept_unknown_host_keys: true
      register: cpu_disk_check      

    - name: Log of cpu_disk_check
      ansible.builtin.debug: 
        var: cpu_disk_check

    - name: > 
              TODO - Add warning condition for cpu_disk_check having any 
              rows over 50% cpu / disk util
      ansible.builtin.set_fact: 
        health_warns: >
          "{{ health_warns + ['There are CPU and disk utilizations over 50%.'] }}" 
      # TODO - obvs 
      when: 1 == 1

    - name: > 
              a. verify the relational database epoch and database epoch match for 
                each node
              b. verify the per-ring quorum master is the same for all nodes. 
                [Each ring might have a different quorum master]
      netapp.ontap.na_ontap_rest_cli: 
        <<: *login
        command: 'cluster/ring'
        params: 
          unitname: "vldb"
          fields: "node,unitname,epoch,db-epoch,db-trnxs,master,online"
        verb: "GET"
      loop: "{{ cluster_rings }}"
      register: verify_cluster_ring

    - name: Log of verify_cluster_ring
      ansible.builtin.debug: 
        var: verify_cluster_ring

    - name: TODO - add fail condition for epochs not matching
      ansible.builtin.set_fact: 
        health_fails: >
          "{{ health_fails: + ['The database epochs do not match 
            for each node.'] }}" 
      # TODO - obvs 
      when: 1 == 1

    - name: TODO - add fail condition for epochs not matching
      ansible.builtin.set_fact: 
        health_fails: >
          "{{ health_fails: + ['The per-ring quorum master is not the same for 
            all nodes.'] }}" 
      # TODO - obvs 
      when: 1 == 1

    - block: 
      - name: > 
              For larger clusters, find epsilon
              (cluster show -fields epsilon)
        netapp.ontap.na_ontap_rest_cli: 
          <<: *login
          command: 'cluster'
          params: 
            fields: "epsilon"
          verb: "GET"
        register: cluster_epsilon

      - name: Log of cluster_epsilon
        ansible.builtin.debug: 
          var: cluster_epsilon

      - name: Set first_node_is_epsilon fact 
        ansible.builtin.set_fact:
          first_node_is_epsilon: "{{ cluster_epsilon.msg.records.0.epsilon }}"

      - name: >
              Set epsilon to false, if not on first node
              (cluster modify -node <epsilonnode> -epsilon false)     
        netapp.ontap.na_ontap_rest_cli: 
          <<: *login
          command: 'cluster'
          body: 
            epsilon: false 
          params: 
            node: "{{ (cluster_epsilon.msg.records |selectattr('epsilon','true')|list)[0]['node'] }}"  
          verb: "PATCH"
        register: move_cluster_epsilon
        when: first_node_is_epsilon == false

      - name: > 
              Set epsilon to true on first node
              (cluster modify -node <firstnode> -epsilon true)     
        netapp.ontap.na_ontap_rest_cli: 
          <<: *login
          command: 'cluster'
          body: 
            epsilon: true 
          params: 
            node: "{{ cluster_epsilon.msg.records.0.node }}"
          verb: "PATCH"
        register: move_cluster_epsilon
        when: first_node_is_epsilon == false

      - name: Log of move_cluster_epsilon
        ansible.builtin.debug: 
          var: move_cluster_epsilon
        when: first_node_is_epsilon == false

      - name: > 
              Confirm epsilon is at first node
              (cluster show -fields epsilon)
        netapp.ontap.na_ontap_rest_cli: 
          <<: *login
          command: 'cluster'
          params: 
            fields: "epsilon"
          verb: "GET"
        register: cluster_epsilon_confirm

      - name: Log of cluster_epsilon_confirm
        ansible.builtin.debug: 
          var: cluster_epsilon_confirm

      - name: Fail playbook if epsilon is not at first node
        ansible.builtin.set_fact: 
          health_fails: >
            "{{ health_fails + ['`cluster show -fields epsilon` should have 
            {{ cluster_epsilon_confirm.msg.records.0.node }} as epsilon, 
            but currently 
            {{ (cluster_epsilon.msg.records |selectattr('epsilon','true')|list)[0]['node'] }}
            is set as epsilon'] }}" 
        when: cluster_epsilon_confirm.msg.records.0.epsilon != true

      when: cluster_node_count|int > 2
    
    - block: 

      - name: Verify each node is in SAN quorum
        netapp.ontap.na_ontap_rest_cli: 
          <<: *login
          command: 'event/log'
          params: 
            message-name: "scsiblade.*"
          verb: "GET"
        register: verify_san_quorum

      - name: Log of verify_san_quorum
        ansible.builtin.debug: 
          var: verify_san_quorum

      - name: Verify SAN (iscsi) configuration. Validate server side is set for redundancy.
        netapp.ontap.na_ontap_rest_cli: 
          <<: *login
          command: 'iscsi/initiator'
          params: 
            fields: "igroup,initiator-name,tpgroup"
          verb: "GET"
        register: verify_iscsi

      - name: Log of verify_iscsi
        ansible.builtin.debug: 
          var: verify_iscsi

      - name: Verify SAN (fcp) configuration. Validate server side is set for redundancy.
        netapp.ontap.na_ontap_rest_cli: 
          <<: *login
          command: 'fcp/initiator'
          params: 
            fields: "igroup,wwpn,lif"
          verb: "GET"
        register: verify_fcp

      - name: Log of verify_fcp
        ansible.builtin.debug: 
          var: verify_fcp

      - name: Verify SAN host configuration before proceeding
        ansible.builtin.set_fact: 
          health_warns: >
            "{{ health_warns + ['Verify SAN configuration. Validate server side 
            is set for redundancy.'] }}"

      when: san_igroups_count | int > 0

    - name: For two node clusters, ensure HA is enabled 
      netapp.ontap.na_ontap_cluster_ha:
        <<: *login
        state: present
      when: cluster_node_count == 2 

    - name: Find any DP SnampMirrors
      netapp.ontap.na_ontap_rest_cli: 
        <<: *login
        command: 'snapmirror/list-destinations'
        params: 
          type: "DP"
        verb: "GET"
      register: verify_snapmirror_dp_destinations

    - name: Log of verify_snapmirror_dp_destinations
      ansible.builtin.debug: 
        var: verify_snapmirror_dp_destinations

    - name: Warn about DP SnapMirror upgrade order
      ansible.builtin.set_fact: 
        health_warns: >
          "{{ health_warns + ['**Destination cluster must be upgraded prior 
          to upgrading source cluster for DP SnampMirrors**'] }}"
      when: verify_snapmirror_dp_destinations.msg.num_records > 0

    - name: Get Snapshot copies 
      netapp.ontap.na_ontap_rest_cli: 
        <<: *login
        command: 'volume/snapshot'
        verb: "GET"
      register: verify_snapshot_count

    - name: Log of verify_snapshot_count
      ansible.builtin.debug: 
        var: verify_snapshot_count

    - name: Warn about DP SnapMirror upgrade order
      ansible.builtin.set_fact: 
        health_fails: >
          "{{ health_fails + ['Each node must not exceed 20,000 snapshot copies'] }}"
      when: verify_snapshot_count.msg.num_records > 20000

    # Haven't figured out the REST equivelant yet
    - name: > 
            List any deduplicated volumes over 96% 
            "volume show -is-sis-volume true -percent-used >96 -fields aggregate,percent-used"
      netapp.ontap.na_ontap_rest_cli: 
        <<: *login
        command: 'volume'
        params: 
          is-sis-volume: "true"
          percent-used: ">96"
          fields: "aggregate,percent-used"
        verb: "GET"
      register: verify_large_dedupe_volumes

    - name: Log of verify_large_dedupe_volumes
      ansible.builtin.debug: 
        var: verify_large_dedupe_volumes

    - block: 
      - name: If verify_large_dedupe_volumes isn't empty, gather list of aggrs involved 
        ansible.builtin.set_fact: 
          large_dedupe_volumes_aggrs: "{{ large_dedupe_volumes_aggrs|default([]) + [item.aggregate] }}"
        loop: "{{ verify_large_dedupe_volumes['msg']['records'] }}"

      - name: Log of large_dedupe_volumes_aggrs
        ansible.builtin.debug: 
          var: large_dedupe_volumes_aggrs

      - name: Check aggr containing deduplicated volumes
        netapp.ontap.na_ontap_ssh_command:
          <<: *login
          command: "df -A {{ large_dedupe_volumes_aggrs | join(',') }}"
          privilege: adv
          accept_unknown_host_keys: true
        register: verify_large_dedupe_volumes_aggrs

      - name: Log of verify_large_dedupe_volumes_aggrs
        ansible.builtin.debug: 
          var: verify_large_dedupe_volumes_aggrs

      - name: TODO - check / fail playbook if a row with over 97% is present
        ansible.builtin.set_fact: 
          health_fails: >
            "{{ health_fails + ['Aggrs containing deduplicated volumes must 
            not exceed 97% used capacity'] }}"
        # TODO obvs 
        when: 1 == 1

      when: verify_large_dedupe_volumes.msg.num_records > 0

    - name: Verify NTP Servers
      ansible.builtin.debug: 
        var: cluster_info['ntp_servers']

    - name: Fail playbook if there are not at least 3 NTP Servers
      ansible.builtin.set_fact: 
        health_fails: >
          "{{ health_fails + ['There must be at least three NTP servers 
            per NetApp best practices'] }}"
      when: cluster_info['ntp_servers']|length < 3

    - name: Verify cluster date 
      ansible.builtin.debug: 
        msg: "{{ item.date }}"
      loop: "{{ cluster_nodes }}"
      loop_control: 
        label: "{{ item.name }}"

    - name: Fail playbook if there is any variation among node timestamps 
      ansible.builtin.set_fact: 
        health_fails: >
          "{{ health_fails + ['Dates and timezones must match on all nodes'] }}"
      when: cluster_nodes | map(attribute='date') | list | unique | length > 1

    - name: Verify cluster health (cluster show)
      netapp.ontap.na_ontap_rest_cli: 
        <<: *login
        command: 'cluster'
        params: 
          fields: "health,eligibility"
        verb: "GET"
      register: verify_cluster_health

    - name: Log of verify_cluster_health
      ansible.builtin.debug: 
        var: verify_cluster_health

    - name: Fail playbook if eligibility or health is not true 
      ansible.builtin.set_fact: 
        health_fails: >
          "{{ health_fails + ['Health and Eligibility must be `true` for all nodes'] }}"
      loop: "{{ verify_cluster_health.msg.records }}"
      when: item.eligibility != true or item.health != true

    - name: Verify aggregates are all online
      ansible.builtin.debug: 
        msg: "{{ item.name }}: {{ item.state }}"
      loop: "{{ aggregate_info }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Fail playbook for any offline aggrs 
      ansible.builtin.set_fact: 
        health_fails: >
          "{{ health_fails + ['All aggregates must be online'] }}"
      when: aggregate_info | selectattr('state','!=','online') | list | length >= 1

    - name: Verify volumes are all online
      ansible.builtin.debug: 
        msg: "{{ item.svm.name }}/{{ item.name }}: {{ item.state }}"
      loop: "{{ volume_info }}"
      loop_control:
        label: "{{ item.svm.name }}/{{ item.name }}"

    - name: Fail playbook for any offline volumes 
      ansible.builtin.set_fact: 
        health_fails: >
          "{{ health_fails + ['All volumes must be online'] }}"
      when: volume_info | selectattr('state','!=','online') | list | length >= 1

    - name: Verify svm's are all running
      ansible.builtin.debug: 
        msg: "{{ item.name }}: {{ item.state }}"
      loop: "{{ vserver_info }}"
      loop_control:
        label: "{{ item.name }}"

    - name: Fail playbook for any svm's not running
      ansible.builtin.set_fact: 
        health_fails: >
          "{{ health_fails + ['All SVMs must be online'] }}"
      when: vserver_info | selectattr('state','!=','running') | list | length >= 1

    # TODO - this feels janky and I think I should be able to do this without a loop
    - name: Check for any LIFs not being home
      ansible.builtin.set_fact: 
        net_int_not_home: "{{ net_int_not_home | default([]) + [item] }}"
      loop: "{{ net_int }}"
      loop_control:
        label: "{{ item.name }}"
      when: item.location.is_home == False

    - block:
      - name: Log of LIFs not home
        ansible.builtin.debug: 
          var: net_int_not_home

      - name: All LIFs should be homed prior to upgrades
        netapp.ontap.na_ontap_rest_cli:
          <<: *login
          command: "network/interface/revert"
          params: 
            "vserver": "*"
          verb: "PATCH"
        register: verify_net_int_revert

      - name: Log of verify_net_int_revert
        ansible.builtin.debug: 
          var: verify_net_int_revert
      
      - name: Check to make sure everything got home (net int show -is-home false)
        netapp.ontap.na_ontap_rest_cli: 
          <<: *login
          command: 'network/interface'
          params: 
            is-home: "false"
          verb: "GET"
        register: verify_all_lifs_home

      - name: Log of verify_all_lifs_home
        ansible.builtin.debug: 
          var: verify_all_lifs_home

      - name: Log of verify_all_lifs_home
        ansible.builtin.set_fact: 
          health_fails: >
            "{{ health_fails + ['All LIFs must be home'] }}"
        when: verify_all_lifs_home.msg.num_records > 0

      when: net_int_not_home is defined

  # TODO - finish adding rest of checks
    - name: Fail playbook if any of the health checks didn't pass
      ansible.builtin.fail: 
        msg: "{{ health_fails }}"
      when: health_fails | length > 0

    - name: Show warnings, if any
      ansible.builtin.debug: 
        var: health_warns
      when: health_warns | length > 0

# TODO - nicely summarize checks in one easy to digest snapshot


