---
- name: Renewing {{ cert_scope }} self-signed SSL certificates
  # https://kb.netapp.com/onprem/ontap/dm/Encryption/How_to_renew_a_Self-Signed_SSL_certificate_in_ONTAP_9_10_0_and_earlier
  hosts: "{{ ansible_limit | default('localhost') }}"
  gather_facts: yes
  connection: 'local'
  collections:
    - netapp.ontap
  vars: 
    dry_run: true
    current_date_time: "{{ ansible_date_time.iso8601 }}"
    cert_name_append: "_{{ ansible_date_time.iso8601_basic_short }}_"
    # remove ",cluster" to just do SVM certs, and vice versa 
    cert_scope: svm,cluster
    #expired_buffer: 30 # days
    expiry_time:  P365DT # 1 year
    # Set to False to ignore expired/expiring dates and just renew all certs
    renew_only_expiring: false
    expiry_time_query: "{{ '<'+current_date_time if renew_only_expiring else '*'}}"
    login: &login
      hostname: "{{ ontap_hostname }}"
      username: "{{ ontap_username }}"
      password: "{{ ontap_password }}"
      https: "{{ https }}"
      validate_certs: "{{ validate_certs }}"
  tasks:
  - name: Get active certificates (security ssl show -server-enabled true) on {{ inventory_hostname }} 
    netapp.ontap.na_ontap_rest_cli: 
      <<: *login
      command: 'security/ssl'
      params: 
        server-enabled: "true"
        fields: "ca,common-name,serial" 
      verb: "GET"
    register: get_active_certs

  - name: Log of get_active_certs
    ansible.builtin.debug: 
      var: get_active_certs

  - name: Set active_certs fact 
    ansible.builtin.set_fact:
      active_certs: "{{ get_active_certs['msg']['records'] }}"

  - name: Log of active_certs 
    ansible.builtin.debug: 
      var: active_certs

  - name: Filter out external certs by passing active_certs serials into `security certificate show -type server -self-signed true`
    netapp.ontap.na_ontap_rest_cli: 
      <<: *login
      command: 'security/certificate'
      params: 
        type: server
        self-signed: "true"
        serial: "{{ active_certs | flatten | map(attribute='serial') | join('|') }}"
      verb: "GET"
    register: get_self_signed_certs
    
  - name: Log of get_self_signed_certs 
    ansible.builtin.debug: 
      var: get_self_signed_certs

  - name: Set self_signed_certs fact based on get_self_signed_certs
    ansible.builtin.set_fact:
      self_signed_certs: "{{ get_self_signed_certs['msg']['records'] }}"

  - name: Log of self_signed_certs 
    ansible.builtin.debug: 
      var: self_signed_certs

  - block: 
    - name: End playbook for {{ inventory_hostname }} if no matching self-signed certs found
      ansible.builtin.debug: 
        msg: "No certificates matching query found on {{ inventory_hostname }}"
    - meta: end_host
    when: self_signed_certs is undefined

  - block: 
    - name: End playbook prior to any certs getting created / deleted if dry_run is true
      ansible.builtin.debug: 
        msg: "Dry run on {{ inventory_hostname }}. self_signed_certs would have been used
              to create new self-signed certificates with the same common name / ca, activate
              them, and then delete the originals. Check active_certs to confirm any external 
              certs are not in self_signed_certs"
    - meta: end_play
    when: dry_run is true

  - name: Create new self-signed certificates with self_signed_certs
    netapp.ontap.na_ontap_security_certificates: 
      <<: *login
      state: present
      name: "{{ item.common_name }}{{ cert_name_append }}"
      common_name: "{{ item.common_name }}"
      type: server
      svm: "{{ item.vserver }}"
      expiry_time: "{{ expiry_time }}"
    loop: "{{ self_signed_certs }}"
    loop_control: 
      label: "{{ item.cert_name }}"

  - name: Get Serial Numbers from newly generated self-signed certificates
    netapp.ontap.na_ontap_rest_cli: 
      <<: *login
      command: 'security/certificate'
      params: 
        type: server
        self-signed: "true"
        cert-name: "*{{ cert_name_append }}"
      verb: "GET"
    register: get_new_self_signed_certs
    
  - name: Set new_self_signed_certs fact
    ansible.builtin.set_fact:
      new_self_signed_certs: "{{ get_new_self_signed_certs['msg']['records'] }}"

  - name: Log of new_self_signed_certs
    ansible.builtin.debug:
      msg: "{{ new_self_signed_certs }}"

  - name: Activate new self-signed certificates
    netapp.ontap.na_ontap_rest_cli: 
      <<: *login
      command: "security/ssl"
      params: 
        server-enabled: "true"
        vserver: "{{ item.vserver }}"
      body: 
        ca: "{{ item.ca }}"
        serial: "{{ item.serial }}"
      verb: "PATCH"
    loop: "{{ new_self_signed_certs }}"
    loop_control: 
      label: "{{ item.common_name }} - {{ item.serial }}"
    register: activate_new_self_signed_certs

  - name: Confirm new self-signed certs are all activated via `security ssl show -common-name <common name>`
    netapp.ontap.na_ontap_rest_cli: 
      <<: *login
      command: 'security/ssl'
      params: 
        server-enabled: "true"
        serial: "{{ item.serial }}"
        common-name: "{{ item.common_name }}"
      verb: "GET"
    loop: "{{ new_self_signed_certs }}"
    loop_control: 
      label: "{{ item.common_name }} - {{ item.serial }}"
    register: confirm_new_self_signed_certs_active

  - name: Log of confirm_new_self_signed_certs_active results from previous task
    ansible.builtin.debug: 
      var: confirm_new_self_signed_certs_active

  - name: Set new_active_self_signed_certs fact
    ansible.builtin.set_fact:
      new_active_self_signed_certs: "{{ confirm_new_self_signed_certs_active['msg']['records'] }}"

  - name: Log of new_active_self_signed_certs 
    ansible.builtin.debug: 
      var: new_active_self_signed_certs

  - name: Safety check - everything in confirm_new_self_signed_certs_active should have item.msg.num_records = 1  
    ansible.builtin.fail:
      msg: "{{ item.item.common_name }} - {{ item.item.serial }} not found in `security ssl show -common-name {{ item.item.common_name }}`"
    loop: "{{ confirm_new_self_signed_certs_active.results }}"
    loop_control: 
      label: "{{ item.item.common_name }} - {{ item.item.serial }}"
    when: item.msg.num_records == 0  

  - name: Time to clean up inactive certificates. Grab certs matching common-name/ca from 
          new_active_self_signed_certs, but NOT containing the cert_name_append. This will 
          ensure we are not grabbing any certs unrelated to the self-signed certs we just activated
    include_tasks: tasks/ontap_get_cluster_info_rest.yml
    vars: 
      gather_subset: ['security/certificates']
      parameters: 
        type: server
        scope: "{{ cert_scope }}"
        common_name: "{{ new_active_self_signed_certs | flatten | map(attribute='common_name') | join('|') }}"
        ca: "{{ new_active_self_signed_certs | flatten | map(attribute='ca') | join('|') }}"
        name: "!*{{ cert_name_append }}"
      fields: ['uuid', 'name', 'svm', 'common_name','ca', 'serial_number']
       
  - name: Set inactive_self_signed_certs fact
    ansible.builtin.set_fact:
      inactive_self_signed_certs: "{{ ontap_rest_info['security/certificates']['records'] }}"

  - name: Log of inactive_self_signed_certs
    ansible.builtin.debug:
      var: inactive_self_signed_certs

  - name: Delete inactive_self_signed_certs 
    # ansible.builtin.debug:
    #   msg: "Would delete {{ item.name }} - {{ item.serial_number }}"
    netapp.ontap.na_ontap_security_certificates: 
      <<: *login
      state: absent
      name: "{{ item.name }}"
      type: server
      svm: "{{ item.svm.name if item.svm is defined else omit }}"
    loop: "{{ self_signed_certs }}"
    loop_control: 
      label: "{{ item.common_name }} - {{ item.serial_number }}"
