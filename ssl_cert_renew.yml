---
- name: Renewing {{ cert_scope }} self-signed SSL certificates 
  # https://kb.netapp.com/onprem/ontap/dm/Encryption/How_to_renew_a_Self-Signed_SSL_certificate_in_ONTAP_9_10_0_and_earlier
  hosts: "{{ ansible_limit | default('localhost') }}"
  gather_facts: yes
  connection: 'local'
  collections:
    - netapp.ontap
  vars: 
    current_date_time: "{{ ansible_date_time.iso8601 }}"
    tmp_cert_name_append: "__tmp__"
    # remove ",cluster" to just do SVM certs, and vice versa 
    cert_scope: cluster
    expiry_time:  P365DT # 1 year
    # Set to False to ignore expiry_time_query and renew all certs
    renew_only_expired: false
    expiry_time_query: "<{{ current_date_time }}"
    login: &login
      hostname: "{{ ontap_hostname }}"
      username: "{{ ontap_username }}"
      password: "{{ ontap_password }}"
      https: "{{ https }}"
      validate_certs: "{{ validate_certs }}"
  tasks:
  - name: Gather self-signed certificates to renew on {{ inventory_hostname }} ({{ cert_scope }}, {{ 'expired certs' if renew_only_expired else 'all certs'}})
    include_tasks: tasks/ontap_get_cluster_info_rest.yml
    vars: 
      gather_subset: ['security/certificates']
      parameters: 
        type: server
        scope: "{{ cert_scope }}"
        expiry_time: "{{ expiry_time_query if renew_only_expired else '*'}}"
      fields: ['uuid', 'name', 'svm', 'common_name','ca', 'serial_number','type','expiry_time']

  - name: Set certs_to_renew Fact based on above query
    set_fact:
      certs_to_renew: "{{ ontap_rest_info['security/certificates']['records'] }}"
    when: ontap_rest_info['security/certificates']['num_records'] > 0

  - block: 
    - name: End playbook for {{ inventory_hostname }} if no matching certs found
      ansible.builtin.debug: 
        msg: "No certificates matching query found on {{ inventory_hostname }}"
    - meta: end_host
    when: certs_to_renew is undefined

  - name: Log of certs_to_renew 
    ansible.builtin.debug:
      msg: "{{ certs_to_renew }}"

  - name: Create new self-signed certificates with certs_to_renew
    netapp.ontap.na_ontap_security_certificates: 
      <<: *login
      state: present
      name: "{{ item.common_name }}{{ tmp_cert_name_append }}"
      common_name: "{{ item.common_name }}"
      type: server
      svm: "{{ item.svm.name if item.svm is defined else omit }}"
      expiry_time: "{{ expiry_time }}"
    loop: "{{ certs_to_renew }}"
    loop_control: 
      label: "{{ item.name }}"

  - name: Get Serial Number from newly generated self-signed certificates
    include_tasks: tasks/ontap_get_cluster_info_rest.yml
    vars: 
      gather_subset: ['security/certificates']
      parameters: 
        type: server
        scope: "{{ cert_scope }}"
        name: "*{{ tmp_cert_name_append }}"
      fields: ['uuid', 'name', 'svm', 'common_name','ca', 'serial_number']
       
  - name: Set new_certs fact
    set_fact:
      new_certs: "{{ ontap_rest_info['security/certificates']['records'] }}"

  - name: Log of new_certs
    ansible.builtin.debug:
      msg: "{{ new_certs }}"

  #   # As of May 2023, REST API does not have security ssl modify command
  - name: Activate new self-signed certificates
    netapp.ontap.na_ontap_command: 
      <<: *login
      command: ['security', 'ssl', 'modify', '-server-enabled', 'true', '-vserver', '{{ item.svm.name if item.svm is defined else item.common_name }}', '-ca', '{{ item.ca }}', '-serial', '{{ item.serial_number }}']
      return_dict: true
    loop: "{{ new_certs }}"
    register: activate_new_certs

  - name: Display activation command results
    ansible.builtin.debug: 
      msg: "{{ item.msg.invoked_command }} \n return from command: {{ item.msg.stdout_lines }}"
    loop: "{{ activate_new_certs.results }}"
    loop_control: 
      label: ""

  - name: Confirm new certs are all activated
    netapp.ontap.na_ontap_command: 
      <<: *login
      command: ['security', 'ssl', 'show', '-server-enabled','true','-common-name', '{{ item.common_name }}', '-fields', 'ca, serial, common-name, server-enabled']
      return_dict: true
    loop: "{{ new_certs }}"
    loop_control: 
      label: "{{ item.common_name }}"
    register: confirm_new_certs
  
  - name: Display confirmation command results
    ansible.builtin.debug: 
      msg: "{{ item.msg.invoked_command }} \n return from command: \n\n {{ item.msg.stdout_lines | join('\n') }}"
    loop: "{{ confirm_new_certs.results }}"
    loop_control: 
      label: ""
  
  # TODO: Only delete the old cert if the new cert is confirmed in place
  #        because otherwise for cluster-level certs, this will break the GUI/REST API


  # - name: Delete old certificates if the new cert is confirmed in place
  #   na_ontap_security_certificates: 
  #     <<: *login
  #     state: absent
  #     name: "{{ item.name }}"
  #     common_name: "{{ item.common_name }}"
  #     type: server
  #     svm: "{{ item.svm.name if item.svm is defined else omit }}"
  #   loop: "{{ certs_to_renew }}"
