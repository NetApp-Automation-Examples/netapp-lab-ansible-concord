configuration:
  runtime: "concord-v2"
  entryPoint: "main"
  dependencies:
    - "mvn://com.walmartlabs.concord.plugins.basic:concord-tasks:2.9.0"
    - "mvn://com.walmartlabs.concord.plugins.basic:ansible-tasks:2.9.0"
  arguments: 
    docker_image: jwarlicknetapp.azurecr.io/concord-ansible-netapp
    ansible_config: ansible/ansible-concord.cfg
    ansible_inventory: ansible/inventory
    cluster_choices: ['cluster1','cluster2','clab1']
    ontap_package_versions: ['9.10.1P15', '9.10.1P16', '9.11.1P1', '9.11.1P2', '9.12.1P13']
    ontap_creds: ${crypto.exportCredentials('Default', 'OntapCreds', null)}
    health_checks_failed: false
    ping_test_failures: false
    health_checks_retry: 5
    skip_ping_test: false
    ping_tests_retry: 5
    pre_upgrade_retry: 5
    takeover_giveback_retry: 5
    #Set to true for mock ping tests 
    mock: false
    default_slack_text: ""
    default_slack_emoji: ":concord:"

publicFlows:
  - main
  - dev

forms:
  review_form: 
  - reviewed: {label: "Logs have been reviewed? Note that process will end if you do not confirm this.", type: "boolean"}
  - end_process: {label: "End proccess now?", type: "boolean"}
  review_ping_tests_form: 
  - reviewed: {label: "Ping test results have been reviewed? Note that process will end if you do not confirm this.", type: "boolean"}
  - end_process: {label: "End proccess now?", type: "boolean"}

  health_checks_form: 
  - clusters:  { label: "Cluster(s)", type: "string+", readonly: false, allow: "${cluster_choices}"}
  - skip_first_health_check: { label: "Skip initial health check?", type: "boolean"}
  #- simulate_failure: { label: "Simulate failure?", type: "boolean" }
    
flows:
  dev: 
    - set:
        upgrade_clusters: "clab1"
        upgrade_image_url: "http://dummy.url"
        upgrade_package_version: "9.10.1P16"
        skip_pre_upgrade: False
        ontap_creds: ${crypto.exportCredentials('Default', 'OntapCredsClab', null)}
    - log: "Get LIFs for ping test and HA Pairs that haven't been upgraded yet"
    - task: ansible
      in:
        dockerImage: ${docker_image}
        configFile: ${ansible_config}
        inventoryFile: ${ansible_inventory}
        playbook: ansible/get_lifs_and_ha_pairs.yml
        extraVars:
          clusters: ${upgrade_clusters} 
          ontap_creds: ${ontap_creds}
          target_ontap_version: ${upgrade_package_version}
        outVars:
          - lifs_to_test
          - ha_pairs_to_upgrade
      out: get_lifs_and_ha_pairs
    - log: ${get_lifs_and_ha_pairs}
    - set: 
        lifs_to_test: ${get_lifs_and_ha_pairs.lifs_to_test}
        ha_pairs_to_upgrade: ${get_lifs_and_ha_pairs.ha_pairs_to_upgrade}
        # for the time being don't mess with the "js" file 
        ha_pairs: ${get_lifs_and_ha_pairs.ha_pairs_to_upgrade}
    - log: "lifs_to_test = ${lifs_to_test}"
    - log: "ha_pairs_to_upgrade = ${ha_pairs_to_upgrade}"
    - script: scripts/sequential_nodes_list.js
      error:
      - log: "Error occured with sequential_node_list.js: ${lastError.cause}"
    - log: "sequential_nodes_list: ${sequential_nodes_list}"
    - log: "Run baseline ping test"
    - call: ping_test_playbook
      in:
        mock: ${mock}
        ontap_clusters: ${upgrade_clusters}
        lifs_to_test: ${lifs_to_test}
      out: ping_test_results
    - set: 
        ping_test_baseline: ${ping_test_results.lifs_ping_test_results}
    - log: ping_test_baseline = ${ping_test_baseline}
    - call: review
    - call: ping_tests
      in: 
        ping_test_clusters: ${upgrade_clusters} 
        ping_test_lifs: ${lifs_to_test}
        ping_test_baseline: ${ping_test_baseline}
      loop: 
        items: 
          - 1
          - 2
        
  main:  
    - form: health_checks_form
    - if: ${health_checks_form.clusters == ['clab1']}
      then: 
      - set: 
          ontap_creds: ${crypto.exportCredentials('Default', 'OntapCredsClab', null)}
    - if: ${health_checks_form.skip_first_health_check == false}
      then:
      - call: health_checks 
        in: 
          health_checks_clusters: ${health_checks_form.clusters} 
      - log: "Completed pre-upgrade health checks"
      else: 
      - log: "Skipped pre-upgrade health checks"
    - form: upgrade_form
      fields:
      - clusters:  { 
          label: "Cluster(s) that passed health checks", type: "string+", readonly: false, 
          allow: "${health_checks_form.clusters}", value: "${health_checks_form.clusters}"
        }
      - image_url: { label: "ONTAP Image URL", type: "string" }
      - package_version: { label: "Target ONTAP Package version, i.e. 9.10.1P15",  type: "string", allow: "${ontap_package_versions}"}
      - skip_pre_upgrade_steps: { label: "Skip pre-upgrade steps? (image upload, autosupport, etc)", type: "boolean"}

    - set:
        upgrade_clusters: ${upgrade_form.clusters}
        upgrade_image_url: ${upgrade_form.image_url}
        upgrade_package_version: ${upgrade_form.package_version}
        skip_pre_upgrade: ${upgrade_form.skip_pre_upgrade_steps}

    - log: "Get LIFs for ping test and HA Pairs that haven't been upgraded yet"
    - task: ansible
      in:
        dockerImage: ${docker_image}
        configFile: ${ansible_config}
        inventoryFile: ${ansible_inventory}
        playbook: ansible/get_lifs_and_ha_pairs.yml
        extraVars:
          clusters: ${upgrade_clusters} 
          ontap_creds: ${ontap_creds}
          target_ontap_version: ${upgrade_package_version}
        outVars:
          - lifs_to_test
          - ha_pairs_to_upgrade
      out: get_lifs_and_ha_pairs
    - log: ${get_lifs_and_ha_pairs}
    - set: 
        lifs_to_test: ${get_lifs_and_ha_pairs.lifs_to_test}
        ha_pairs_to_upgrade: ${get_lifs_and_ha_pairs.ha_pairs_to_upgrade}
        # for the time being don't mess with the "js" file 
        ha_pairs: ${get_lifs_and_ha_pairs.ha_pairs_to_upgrade}
    - log: "lifs_to_test = ${lifs_to_test}"
    - log: "ha_pairs_to_upgrade = ${ha_pairs_to_upgrade}"
    - script: scripts/sequential_nodes_list.js
      error:
      - log: "Error occured with sequential_node_list.js: ${lastError.cause}"
    - log: "sequential_nodes_list: ${sequential_nodes_list}"
    - if: ${sequential_nodes_list == []}
      then: 
        - log: "There are no nodes to upgrade, ending process."
        - exit
    - if: ${skip_pre_upgrade == false}
      then:
      - log: "Run the pre-upgrade tasks"
      - task: ansible
        in:
          dockerImage: ${docker_image}
          configFile: ${ansible_config}
          inventoryFile: ${ansible_inventory}
          playbook: ansible/pre_upgrade.yml
          extraVars:
            clusters: ${upgrade_clusters} 
            ontap_creds: ${ontap_creds}
            ontap_package_version: ${upgrade_package_version}
            ontap_package_url: ${upgrade_image_url}
        out: pre_upgrade
        retry:
          times: ${pre_upgrade_retry}
      else: 
      - log: "Skipping pre-upgrade steps per form selection."

    - log: "Run baseline ping test"
    - call: ping_test_playbook
      in:
        mock: ${mock}
        ontap_clusters: ${upgrade_clusters}
        lifs_to_test: ${lifs_to_test}
      out: ping_test_results
    - set: 
        ping_test_baseline: ${ping_test_results.lifs_ping_test_results}
    - log: ping_test_baseline = ${ping_test_baseline}

    - log: Run the takeover_giveback on each ha pair sequentially 
    - call: upgrade_node
      in: 
        nodes_list: ${item}
        lifs_to_test: ${lifs_to_test}
        ping_test_baseline: ${ping_test_baseline}
        target_ontap_version: ${upgrade_package_version}
      loop: 
        items: ${sequential_nodes_list}
    - call: ping_tests
      in: 
        ping_test_clusters: ${upgrade_clusters}  
        ping_test_lifs: ${lifs_to_test}
        ping_test_baseline: ${ping_test_baseline}
    - log: Run the post-upgrade tasks
    - task: ansible
      in:
        dockerImage: ${docker_image}
        configFile: ${ansible_config}
        inventoryFile: ${ansible_inventory}
        playbook: ansible/post_upgrade.yml
        extraVars:
          clusters: ${upgrade_clusters} 
          ontap_creds: ${ontap_creds}
      out: post_upgrade
    - log: "Post upgrade results: ${post_upgrade}"
    - call: health_checks 
      in: 
        health_checks_clusters: ${health_checks_form.clusters} 
        post_upgrade_check: True
    - log: "Completed post-upgrade health checks"


  upgrade_node: 
    - log: "nodes = ${nodes_list}"
    - try: 
      - if: ${skip_ping_test == false}
        then:
          - call: ping_tests
            in: 
              ping_test_clusters: ${upgrade_clusters}  
              ping_test_lifs: ${lifs_to_test}
              ping_test_baseline: ${ping_test_baseline}
      - task: ansible
        in:
          dockerImage: ${docker_image}
          configFile: ${ansible_config}
          inventoryFile: ${ansible_inventory}
          playbook: ansible/takeover_giveback.yml
          extraVars:
            nodes: ${nodes_list}
            clusters: ${upgrade_clusters} 
            ontap_creds: ${ontap_creds}
            target_ontap_version: ${target_ontap_version}
        out: node_upgrade_results
        retry:
          times: ${takeover_giveback_retry}
        error: 
          - call: send_slack
            in: 
              slack_text: "Takeover/giveback playbook has failed ${takeover_giveback_retry} times"
          - log: "Takeover/giveback playbook has failed ${takeover_giveback_retry} times"
          - exit
        
      - log: "results of takeover_giveback_mock.yml - ${node_upgrade_results.ha_info}"
      error: 
        - throw: "Something happened ${lastError}"

  health_checks:
    - call: health_checks_playbook
      in: 
        ontap_clusters: ${health_checks_clusters}
        post_upgrade_check: ${orDefault('post_upgrade_check', 'False')}
      retry:
        in: 
          health_checks_failed: true
        times: ${health_checks_retry}
      out: health_checks_results
      error: 
        - call: send_slack
          in: 
            slack_text: "Health Check playbook has failed ${health_checks_retry} times"
        - log: "Health Check playbook has failed ${health_checks_retry} times"
        - exit
      
    - log: "Health checks playbook ran succesfully, review before proceeding"
    - call: review 
    
  ping_tests:
    - call: ping_test_playbook
      in:
        mock: ${mock}
        ontap_clusters: ${ping_test_clusters}
        lifs_to_test: ${ping_test_lifs}
        lifs_baseline_ping_test: ${ping_test_baseline}
      out: ping_test_results
    - log: ${ping_test_results}
    - log: "Ping tests playbook ran succesfully"
    - if: ${hasVariable('ping_test_results.lifs_diff_ping_test_results') and ping_test_results.lifs_diff_ping_test_results != {}} 
      then: 
        - log: Review diff with baseline pint test before proceeding"
        - call: send_slack
          in: 
            slack_emoji: ":pr_normal_review:"
            slack_text: "ONTAP Upgrade concord process needs ping tests reviewed before it can proceed"
        - form: review_ping_tests_form
          saveSubmittedBy: true
        - log: "Logs/progress reviewed by ${review_ping_tests_form.submittedBy.displayName}"
        - if: ${review_ping_tests_form.end_process == true or review_ping_tests_form.reviewed == false}
          then:
            - log: "Process ended by ${review_ping_tests_form.submittedBy.displayName}: ${review_ping_tests_form}"
            - call: send_slack
              in: 
                slack_text: "ONTAP Upgrade concord process ended after ping test review by ${review_ping_tests_form.submittedBy.displayName}"
            - exit
      else: 
        - log: No need to review, the latest ping test results matched the baseline ping test results



  review:
    - call: send_slack
      in: 
        slack_emoji: ":pr_normal_review:"
        slack_text: "ONTAP Upgrade concord process needs reviewed before it can proceed"
    - form: review_form
      saveSubmittedBy: true
    - log: "Logs/progress reviewed by ${review_form.submittedBy.displayName}"
    - if: ${review_form.end_process == true or review_form.reviewed == false}
      then:
        - log: "Process ended by ${review_form.submittedBy.displayName}: ${review_form}"
        - call: send_slack
          in: 
            slack_emoji: ":stop:"
            slack_text: "ONTAP Upgrade concord process ended by ${review_form.submittedBy.displayName}"
        - exit
    
  health_checks_playbook:
    - log: "health_checks_failed value = ${health_checks_failed}"
    - if: ${health_checks_failed == true}
      then:
        - call: review
    - task: ansible
      in:
        dockerImage: ${docker_image}
        configFile: ${ansible_config}
        inventoryFile: ${ansible_inventory}
        playbook: ansible/health_checks.yml
        extraVars:
          clusters: ${ontap_clusters} 
          ontap_creds: ${ontap_creds}
          post_upgrade_check: ${post_upgrade_check}
          #simulate_failure: ${simulate_failure}
        outVars:
          - "summary_logs"
          - "summary_failures"
          - "summary_warnings"
      out: health_checks
    - set:
        health_checks_results: ${health_checks}

  ping_test_playbook: 
    - log: "mock value = ${mock}"
    - task: ansible
      in:
        dockerImage: ${docker_image}
        configFile: ${ansible_config}
        inventoryFile: ${ansible_inventory}
        playbook: ansible/ping_test.yml
        extraVars:
          mock: ${mock}
          clusters: ${ontap_clusters} 
          lifs_to_test: ${lifs_to_test}
          ontap_creds: ${ontap_creds}
          lifs_baseline_ping_test: ${orDefault('lifs_baseline_ping_test', '')}
        outVars:
          - lifs_that_failed
          - lifs_ping_test_results
          - lifs_diff_ping_test_results
      out: ping_tests
    - set:
        ping_test_results: ${ping_tests}

  send_slack: 
    - log: "Mock send slack message: ${orDefault('slack_emoji', default_slack_emoji)} \n 
            http://localhost:8001/#/process/${orDefault('parentInstanceId', txId)} \n 
            ${orDefault('slack_text', default_slack_text)}"

  onFailure:
    - call: send_slack
      in:
        slack_emoji: ":err:"
        slack_text: "The ONTAP Upgrade Concord worfklow has failed"

