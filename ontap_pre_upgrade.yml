---
- name: Pre-upgrade tasks for ONTAP Upgrade
  hosts: "{{ ansible_limit }}"
  gather_facts: no
  connection: 'local'
  collections:
    - netapp.ontap
  vars_files: 
    - http_server
  vars:
    current_packages: []
    ontap_image: 9101P15_q_image.tgz
    ontap_package_version: 9.10.1P15
    ontap_package_url: "{{ http_server_url }}/{{ ontap_image }}"
    validation_warnings: []
    validation_warnings_to_ignore: 
      - Manual checks

  module_defaults:    
    group/netapp.ontap.netapp_ontap:      
      hostname: "{{ ontap_hostname }}"
      username: "{{ ontap_username }}"
      password: "{{ ontap_password }}"
      https: "{{ https }}"
      validate_certs: "{{ validate_certs }}"

  tasks:
  - name: Check what current image(s) are there
    block: 
    - name: Log of target ONTAP Package download URL and version
      debug: 
        msg: "{{ ontap_package_version }} - {{ ontap_package_url }}"
      run_once: true

    - name: Ping download URL
      uri: 
        url: "{{ ontap_package_url }}"
        method: HEAD
        return_content: no
      register: ontap_package_url_head
      run_once: true

    - name: Fail playbook if ontap package can't be reached 
      ansible.builtin.fail: 
        msg: "{{ ontap_package_url }} is not reachable. See: {{ ontap_package_url_head }}"
      when: ontap_package_url_head.status != 200
      run_once: true

    - name: Check for package already being there
      include_tasks: tasks/ontap_get_cluster_info_rest.yml
      vars: 
        gather_subset: 
          - cluster/software/packages
        parameters: 
          version: "{{ ontap_package_version }}"
    
    - name: Set current_packages
      ansible.builtin.set_fact: 
        current_packages: "{{ ontap_rest_info['cluster/software/packages']['records'] }}"

    - name: Log of current packages 
      ansible.builtin.debug: 
        var: current_packages 
    
    tags: ["image", "upload_check"]

  - name: Upload {{ ontap_image }} to the cluster, if not present already
    block: 

    - name: Upload {{ ontap_image }} to the cluster. This could take several minutes. 
      netapp.ontap.na_ontap_software_update:
        state: present
        package_url: "{{ ontap_package_url }}"
        package_version: "{{ ontap_package_version }}"
        download_only: True
      register: ontap_image_upload
    
    - name: Log of ontap_image_upload
      ansible.builtin.debug: 
        var: ontap_image_upload

    when: ontap_package_version not in current_packages | map(attribute='version') | list
    tags: ["image", "upload"]
  
  - name: "Validate ONTAP Software update to {{ ontap_package_version }}"
    block: 
    - name: Get validation warnings to ensure there aren't any we don't expect 
      netapp.ontap.na_ontap_restit:
        api: cluster/software
        method: PATCH
        body:  
          validate_only: true
          version: "{{ ontap_package_version }}"
      register: start_upgrade_validation

    - name: Log of start_upgrade_validation
      ansible.builtin.debug: 
        var: start_upgrade_validation

    - name: Get validation results once they are finished
      netapp.ontap.na_ontap_restit:
        api: cluster/software
        method: GET
      register: upgrade_validation_results
      until: upgrade_validation_results.response.validation_results is defined
      retries: 100
      delay: 10

    # - name: Log of upgrade_validation_results
    #   ansible.builtin.debug: 
    #     var: upgrade_validation_results

    - name: "Check for warnings beyond what we are expecting {{ validation_warnings_to_ignore | join(',') }}"
      ansible.builtin.set_fact:
        validation_warnings: "{{ validation_warnings + [item] }}"
      loop: "{{ upgrade_validation_results.response.validation_results }}"
      when: item.update_check not in validation_warnings_to_ignore

    - name: Log of validation warnings
      debug:
        msg: "{{ validation_warnings }}"

    - name: Prompt for review if there are validation warnings that we don't expect
      ansible.builtin.pause:
        prompt: "Please review the results of cluster upgrade validation and press 
                  ENTER to continue with the upgrade. To abort upgrade, hit ctrl+c and then 'A':
                  \n\n----------------------------------------------\n\n
                  {% for warning in validation_warnings %}
                    {{ warning.status }}: \n{{ warning.issue.message }}\n\n
                    {{ warning.action.message }}
                    \n\n----------------------------------------------\n\n

                  {% endfor %}"
      when: validation_warnings | length > 0
    tags: ["validate"]

  - name: "Disable autogiveback"
    block: 
    - name: Disable auto-giveback on all nodes (`storage failover modify -auto-giveback false -nodes *`)  
      netapp.ontap.na_ontap_rest_cli: 
        command: 'storage/failover'
        params:   
          node: "*"
        body: 
          auto-giveback: "false"
        verb: "PATCH"
      register: update_autogiveback 

    - name: "Log of update_autogiveback"
      ansible.builtin.debug: 
        var: update_autogiveback

    - name: Get auto-giveback status after update command
      netapp.ontap.na_ontap_rest_cli: 
        command: 'storage/failover'
        params: 
          fields: 'auto-giveback'
        verb: "GET"
      register: confirm_autogiveback

    - name: Set confirm_autogiveback var 
      ansible.builtin.debug: 
        var: confirm_autogiveback

    - name: Set autogiveback_still_true check 
      ansible.builtin.set_fact:
        autogiveback_still_true: "{{ confirm_autogiveback.msg.records | selectattr('auto_giveback', 'equalto', true) | list }}"

    - name: Fail playbook if auto-giveback is not equal to true on all nodes
      ansible.builtin.fail: 
        msg: "auto-giveback should be set to false on all nodes and is not. See logs above."
      when: autogiveback_still_true | length > 0

    tags: ["autogiveback"]

  - name: Kick off autosupports 
    block: 
    - name: Get number of nodes
      include_tasks: tasks/ontap_get_cluster_info_rest.yml
      vars: 
        gather_subset: 
          - cluster/nodes
    
    - name: Set maint_hours based on number of nodes
      ansible.builtin.set_fact:
        maint_hours: "{{ (1.5 * ontap_rest_info['cluster/nodes']['num_records'] | int) | round | int }}"
    
    - name: Build autosupport_message variable
      ansible.builtin.set_fact:
        autosupport_message: >
          MAINT={{ maint_hours }}h Starting Non-Disruptive Upgrade to {{ ontap_package_version }}
    
    # https://kb.netapp.com/onprem/ontap/os/How_to_suppress_automatic_case_creation_during_scheduled_maintenance_windows_-_ONTAP_9
    - name: "Trigger maintenance autosupports (-type all -message '{{ autosupport_message }}'"
      na_ontap_autosupport_invoke:
        autosupport_message: "{{ autosupport_message }}"
        type: all

    tags: ["autosupport"]
       