---
- name: Testing {{ cert_scope }} self-signed SSL certificates query
  # https://kb.netapp.com/onprem/ontap/dm/Encryption/How_to_renew_a_Self-Signed_SSL_certificate_in_ONTAP_9_10_0_and_earlier
  hosts: "{{ ansible_limit | default('localhost') }}"
  gather_facts: yes
  connection: 'local'
  collections:
    - netapp.ontap
  vars: 
    current_date_time: "{{ ansible_date_time.iso8601 }}"
    cert_name_append: "_{{ ansible_date_time.iso8601_basic_short }}_"
    # remove ",cluster" to just do SVM certs, and vice versa 
    cert_scope: svm,cluster
    #expired_buffer: 30 # days
    expiry_time:  P365DT # 1 year
    # Set to False to ignore expired/expiring dates and just renew all certs
    renew_only_expiring: false
    expiry_time_query: "{{ '<'+current_date_time if renew_only_expiring else '*'}}"
    login: &login
      hostname: "{{ ontap_hostname }}"
      username: "{{ ontap_username }}"
      password: "{{ ontap_password }}"
      https: "{{ https }}"
      validate_certs: "{{ validate_certs }}"
  tasks:
  - name: Gather self-signed certificates to renew on {{ inventory_hostname }} ({{ cert_scope }}, {{ 'expired certs' if renew_only_expired else 'all certs'}})
    include_tasks: tasks/ontap_get_cluster_info_rest.yml
    vars: 
      gather_subset: ['security/certificates']
      parameters: 
        type: server
        scope: "{{ cert_scope }}"
        expiry_time: "{{ expiry_time_query }}"
        # Safety check - self-signed certs will not have any intermediate certs
        intermediate_certificates: ""        
      fields: ['uuid', 'name', 'svm', 'common_name','ca', 'serial_number','type','expiry_time']

  - name: Set certs_to_renew Fact based on above query
    set_fact:
      certs_to_renew: "{{ ontap_rest_info['security/certificates']['records'] }}"
    when: ontap_rest_info['security/certificates']['num_records'] > 0

  - block: 
    - name: End playbook for {{ inventory_hostname }} if no matching certs found
      ansible.builtin.debug: 
        msg: "No certificates matching query found on {{ inventory_hostname }}"
    - meta: end_host
    when: certs_to_renew is undefined

  - name: Log of certs_to_renew 
    ansible.builtin.debug:
      msg: "{{ certs_to_renew }}"
