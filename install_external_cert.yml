---
- name: Install External Certificate with SAN containing Cluster, Node, and SVM FQDN/IPs
  hosts: "{{ ansible_limit }}"
  gather_facts: true
  connection: 'local'
  collections:
    - netapp.ontap
  module_defaults:
    group/netapp.ontap.netapp_ontap:
      hostname: "{{ ontap_hostname }}"
      username: "{{ ontap_username }}"
      password: "{{ ontap_password }}"
      https: "{{ https }}"
      validate_certs: "{{ validate_certs }}"
  vars: 
    cert_common_name: "{{ ontap_hostname }}"
    cert_name_base: "--NetApp-CA-Signed--"
    cert_name_append: "{{ cert_name_base }}{{ ansible_date_time.date }}"
    cert_dir: "{{ playbook_dir}}/tmp/"
    cert_base_file_name: "{{ cert_dir }}{{ cert_common_name }}"
    private_key_file: "{{ cert_base_file_name }}.key"
    public_cert_file: "{{ cert_base_file_name }}.crt"
    intermediate_cert_file: "{{ cert_base_file_name }}-ca-bundle.crt"
    expiry_time:  P365DT # 1 year
    ontap_intermediate_cert: ""
    ontap_cluster_cert: ""
    ontap_svm_certs: []

  tasks:
  - name: Get Cluster SVM name
    include_tasks: tasks/ontap_get_cluster_info_rest.yml
    vars: 
      gather_subset: 
        - cluster
      fields: ["name"]

  - name: Set cluster_svm fact
    ansible.builtin.set_fact: 
      cluster_svm: "{{ ontap_rest_info.cluster.name }}"

  - name: Get SVM names
    include_tasks: tasks/ontap_get_cluster_info_rest.yml
    vars: 
      gather_subset: 
        - svm/svms
      fields: ["name"]

  - name: Set svm facts
    ansible.builtin.set_fact: 
      # This assumes the SAN field of the cert contains all the SVMs 
      svms: "{{ ontap_rest_info['svm/svms']['records'] }}"
      svm_names: "{{ ontap_rest_info['svm/svms']['records'] | map(attribute='name') }}"
      svms_comma_list: "{{ ontap_rest_info['svm/svms']['records'] | map(attribute='name') | join(',') }}"
      svms_pipe_list: "{{ ontap_rest_info['svm/svms']['records'] | map(attribute='name') | join('|') }}"

  - name: Check to see if this cert already exists at the cluster level
    include_tasks: tasks/ontap_get_cluster_info_rest.yml
    vars: 
      gather_subset: 
        - security/certificates
      parameters:
        public_certificate: "{{ lookup('file', public_cert_file) }}"
        common_name: "{{ cert_common_name }}"
        type: server
        scope: cluster
      fields: ["*"]

  - name: Set ontap_cluster_cert
    ansible.builtin.set_fact: 
      ontap_cluster_cert: "{{ ontap_rest_info['security/certificates']['records'] | first }}"
    when: ontap_rest_info['security/certificates']['num_records'] > 0       

  - name: Log of ontap_cluster_cert
    ansible.builtin.debug: 
      var: ontap_cluster_cert
  
  # If cert is not installed yet on the cluster, let's do the thing
  - block: 
    - name: Install the signed certificate at the ONTAP Cluster level 
      netapp.ontap.na_ontap_security_certificates:
        common_name: "{{ cert_common_name }}"
        name: "{{ cert_common_name }}{{ cert_name_append }}"
        public_certificate: "{{ lookup('file', public_cert_file) }}"
        private_key: "{{ lookup('file', private_key_file) }}"
        type: server
        intermediate_certificates: "{{ lookup('file', intermediate_cert_file) }}"
        expiry_time: "{{ expiry_time }}"

    - name: Get Serial Number from newly installed certificate
      include_tasks: tasks/ontap_get_cluster_info_rest.yml
      vars: 
        gather_subset: 
          - security/certificates
        fields: ["*"]
        parameters:
          public_certificate: "{{ lookup('file', public_cert_file) }}"
          common_name: "{{ cert_common_name }}"
          type: server
          name: "{{ cert_common_name }}{{ cert_name_append }}"
      
    - name: Set ontap_cluster_cert fact
      ansible.builtin.set_fact:
        ontap_cluster_cert: "{{ ontap_rest_info['security/certificates']['records'] | first }}"

    - name: Log of ontap_cluster_cert
      ansible.builtin.debug:
        msg: "{{ ontap_cluster_cert }}"

    when: ontap_cluster_cert.common_name is not defined

  # Check for SVM certs 
  - name: Check to see if this cert already exists for the SVMs 
    include_tasks: tasks/ontap_get_cluster_info_rest.yml
    vars: 
      gather_subset: 
        - security/certificates
      parameters:
        public_certificate: "{{ lookup('file', public_cert_file) }}"
        common_name: "{{ cert_common_name }}"
        type: server
        scope: svm
        svm.name: "{{ svms_pipe_list }}"
      fields: ["*"]

  - name: Set ontap_svm_certs
    ansible.builtin.set_fact:
      ontap_svm_certs: "{{ ontap_rest_info['security/certificates']['records'] }}"
    when: ontap_rest_info['security/certificates']['num_records'] > 0 

  - name: Log of ontap_svm_certs
    ansible.builtin.debug: 
      var: ontap_svm_certs

  # If any SVMs don't have the cert yet, let's do the thing
  - block: 
    - name: Install the signed certificate on SVMs
      netapp.ontap.na_ontap_security_certificates:
        common_name: "{{ cert_common_name }}"
        name: "{{ cert_common_name }}{{ cert_name_append }}"
        public_certificate: "{{ lookup('file', public_cert_file) }}"
        private_key: "{{ lookup('file', private_key_file) }}"
        svm: "{{ item.name }}"
        type: server
        intermediate_certificates: "{{ lookup('file', intermediate_cert_file) }}"
        expiry_time: "{{ expiry_time }}"
      loop: "{{ svms }}"
      loop_control: 
        label: "{{ item.name }}"
      when: item.name not in ontap_svm_certs

    - name: Get Serial Number from newly installed certificate
      include_tasks: tasks/ontap_get_cluster_info_rest.yml
      vars: 
        gather_subset: 
          - security/certificates
        fields: ["*"]
        parameters:
          public_certificate: "{{ lookup('file', public_cert_file) }}"
          common_name: "{{ cert_common_name }}"
          type: server
          scope: svm
          name: "{{ cert_common_name }}{{ cert_name_append }}"
    
    - name: Set ontap_svm_certs fact
      ansible.builtin.set_fact:
        ontap_svm_certs: "{{ ontap_rest_info['security/certificates']['records'] }}"

    - name: Log of ontap_svm_certs
      ansible.builtin.debug:
        var: ontap_svm_certs

    when: ontap_svm_certs | length < svms | length 

  - name: WUT
    ansible.builtin.debug:
      var: ontap_cluster_cert

  - name: Activate the cluster certificate
    netapp.ontap.na_ontap_rest_cli: 
      command: "security/ssl"
      params: 
        server-enabled: "true"
        vserver: "{{ cluster_svm }}"
      body: 
        ca: "{{ ontap_cluster_cert.ca }}"
        serial: "{{ ontap_cluster_cert.serial_number }}"
        common-name: "{{ ontap_cluster_cert.common_name }}"
      verb: "PATCH"

  - name: Activate the SVM certificates
    netapp.ontap.na_ontap_rest_cli: 
      command: "security/ssl"
      params: 
        server-enabled: "true"
        vserver: "{{ item.svm.name }}"
      body: 
        ca: "{{ item.ca }}"
        serial: "{{ item.serial_number }}"
        common-name: "{{ item.common_name }}"
      verb: "PATCH"
    loop: "{{ ontap_svm_certs }}"
    loop_control:
      label: "{{ item.svm.name }} - {{ item.name }}"

  - name: Verify the newly installed cert(s) are activated 
    netapp.ontap.na_ontap_rest_cli: 
      command: "security/ssl"
      params: 
        server-enabled: "true"
        fields: "ca,serial,common-name,vserver,server-enabled,client-enabled"
      body: 
        ca: "{{ ontap_cluster_cert.ca }}"
        common-name: "{{ ontap_cluster_cert.common_name }}"
      verb: "GET"
    register: verify_certs_installed_results

  - name: Log of verify_certs_installed_results
    ansible.builtin.debug:
      var: verify_certs_installed_results

  - name: Set verify_certs_installed fact
    ansible.builtin.set_fact:
      verify_certs_installed: "{{ verify_certs_installed_results.msg.records }}"

  - name: Fail playbook if the cluster cert didn't get activated  
    ansible.builtin.fail:
      msg: "{{ ontap_cluster_cert.common_name }} for {{ cluster_svm }} is not present in the `ssl show -server-enabled true` output so it did not get succesfully activated."
    when: cluster_svm not in verify_certs_installed | map(attribute='vserver') 

  - name: Fail playbook if any of the SVM certs didn't get activated  
    ansible.builtin.fail:
      msg: "One or more of the SVM certs is not present in the `ssl show -server-enabled true` output so it did not get succesfully activated."
    #We expect there to be a difference of one because of the cluster svm
    when: (verify_certs_installed | length) <= (ontap_svm_certs | length)  
    
      