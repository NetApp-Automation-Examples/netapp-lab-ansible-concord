---
- name: "Pre/Post Upgrade Health Checks on {{ clusters }}"
  hosts: "{{ clusters | default('localhost') }}"
  gather_facts: no
  connection: 'local'
  collections:
    - netapp.ontap
  module_defaults:
    group/netapp.ontap.netapp_ontap:
      hostname: "{{ ontap_hostname }}"
      username: "{{ ontap_username }}"
      password: "{{ ontap_password }}"
      https: "{{ https }}"
      validate_certs: "{{ validate_certs }}"
  vars:
    summary_failures: []
    summary_warnings: []
    summary_logs: []
    allowed_jobs: ["FabricPool Space Job", "SP Certificate Expiry Check Job"]
    cluster_rings: ["vldb","mgmt","vifmgr","bcomd","crs"]
    check_for_not_online: ["storage/aggregates", "storage/volumes", "svm/svms"]
    post_upgrade_check: False
  tasks:
    - name: Get basic info needed and set variables (`netapp.ontap.na_ontap_rest_info`)
      block: 
      
      - name: |
          Get cluster, node, aggr, vol, svm, network interfaces, port and SAN info
          (`netapp.ontap.na_ontap_rest_info`)
        include_tasks: tasks/rest_info.yml
        vars: 
          gather_subset: 
            - cluster
            - cluster/nodes
            - protocols/san/igroups
            - aggregate_info
            - volume_info
            - vserver_info
            - network/ip/interfaces
          parameters:
            fields: ['*']

      - name: Set needed variables
        ansible.builtin.set_fact: 
          cluster_info: "{{ ontap_rest_info['cluster'] }}"
          cluster_node_count: "{{ ontap_rest_info['cluster/nodes']['num_records'] }}"
          cluster_nodes: "{{ ontap_rest_info['cluster/nodes']['records'] }}"
          san_igroups: "{{ ontap_rest_info['protocols/san/igroups']['records'] }}"          
          san_igroups_count: "{{ ontap_rest_info['protocols/san/igroups']['num_records'] }}"
          aggregate_info: "{{ ontap_rest_info['storage/aggregates']['records'] }}"
          volume_info: "{{ ontap_rest_info['storage/volumes']['records'] }}"
          vserver_info: "{{ ontap_rest_info['svm/svms']['records'] }}"
          net_int: "{{ ontap_rest_info['network/ip/interfaces']['records'] }}"

      - name: Log of cluster node count and igroup count 
        include_tasks: tasks/add_log.yml
        vars: 
          log: 
            Cluster Nodes: "{{ cluster_nodes | map(attribute='name') }}"
            SAN igroups: "{{ san_igroups | map(attribute='name') }}"

      tags: ["always"]

    - name: Check overall health of the cluster
      block: 

      - include_tasks: tasks/health_checks/health_alerts.yml

      - include_tasks: tasks/health_checks/cluster_health.yml

      - include_tasks: tasks/health_checks/failover.yml

      tags: ["health"]

    - name: Check system utilization  
      block: 

      - include_tasks: tasks/health_checks/cpu_disk_utilization.yml    
      
      tags: ["cpu_disk"]

    - name: Check cluster ring database epoch and quorum master
      block: 

      - include_tasks: tasks/health_checks/cluster_rings.yml    

      tags: ["cluster_rings"]
    
    - name: Make sure cluster epsilon is at last node 
      block: 

      - name: For larger clusters, find epsilon (`cluster show -fields epsilon`)
        netapp.ontap.na_ontap_rest_cli: 
          command: 'cluster'
          params: 
            fields: "epsilon"
          verb: "GET"
        register: cluster_epsilon

      - name: Log of cluster_epsilon
        include_tasks: tasks/add_log.yml
        vars: 
          log: 
            cluster_epsilon: "{{ cluster_epsilon.msg.records | dicts_to_table }}"

      - name: Set first_node and epsilon_node facts 
        ansible.builtin.set_fact:
          last_node: "{{ cluster_epsilon.msg.records | last }}"
          epsilon_node: "{{ cluster_epsilon.msg.records |selectattr('epsilon','true') | first | default(omit) }}"

      - name: Set epsilon to false, if not on last node (`cluster modify -node <epsilonnode> -epsilon false`)     
        netapp.ontap.na_ontap_rest_cli: 
          command: 'cluster'
          body: 
            epsilon: false 
          params: 
            node: "{{ epsilon_node.node }}"  
          verb: "PATCH"
        register: move_cluster_epsilon

        # Catch edge case where epsilon is not true for any node
        when: last_node.epsilon == false and epsilon_node is defined 

      - name: Set epsilon to true on last node (`cluster modify -node <lastnode> -epsilon true`)     
        netapp.ontap.na_ontap_rest_cli: 
          command: 'cluster'
          body: 
            epsilon: true 
          params: 
            node: "{{ last_node.node }}"
          verb: "PATCH"
        register: move_cluster_epsilon
        when: last_node.epsilon == false

      - name: Log of move_cluster_epsilon
        include_tasks: tasks/add_log.yml
        vars: 
          log: 
            cluster_epsilon_move: "{{ move_cluster_epsilon }}"
        when: last_node.epsilon == false

      - name: Confirm epsilon is at last node (`cluster show -fields epsilon`)
        netapp.ontap.na_ontap_rest_cli: 
          command: 'cluster'
          params: 
            fields: "epsilon"
          verb: "GET"
        register: cluster_epsilon_confirm

      - name: Log of cluster_epsilon_confirm
        include_tasks: tasks/add_log.yml
        vars: 
          log: 
            Confirm Cluster Epsilon: "{{ cluster_epsilon_confirm.msg.records | dicts_to_table }}"

      - name: Fail playbook if epsilon is not at last node
        include_tasks: tasks/add_failure.yml
        vars:
          failure: 
            issue: "{{ last_node.node }} should be epsilon, but currently {{ epsilon_node.node | default('no node') }} is set as epsilon"
            details: "{{ cluster_epsilon_confirm | dicts_to_table }}"
        when: cluster_epsilon_confirm.msg.records.0.epsilon == false
      
      when: cluster_node_count | int > 2
      tags: ["epsilon"]
    
    - name: Check SAN configuration, if applicable
      block: 

      - include_tasks: tasks/health_checks/san.yml    

      - name: Verify SAN host configuration before proceeding
        include_tasks: tasks/add_warning.yml
        vars: 
          warning: 
            issue: "Verify SAN configuration. Validate server side is set for redundancy."
            details: 
              iscsi: "{{ verify_iscsi.msg.records | dicts_to_table }}"
              fcp: "{{ verify_fcp.msg.records | dicts_to_table }}"
      
      when: san_igroups_count | int > 0
      tags: ["san"] 

    - name: Check SnapMirrors and SnapShot count
      block: 

      - include_tasks: tasks/health_checks/dp_snapmirror.yml
      
      - name: Warn about DP SnapMirror upgrade order
        include_tasks: tasks/add_warning.yml
        vars: 
          warning: 
            issue: "**Destination cluster must be upgraded prior 
                    to upgrading source cluster for DP SnampMirrors** 
                    See https://docs.netapp.com/us-en/ontap/upgrade/task_preparing_snapmirror_relationships_for_a_nondisruptive_upgrade_or_downgrade.html"
            details: "{{ verify_snapmirror_dp_destinations.msg.records | dicts_to_table }}"
        when: verify_snapmirror_dp_destinations.msg.num_records > 0

      tags: ["dp_snapmirror"]

    - name: Check snapshot count
      block: 

      - include_tasks: tasks/health_checks/snapshots_count.yml

      - name: Fail playbook if there are more than 20,000 snapshot copies
        include_tasks: tasks/add_failure.yml
        vars: 
          failure: 
            issue: "Each node must not exceed 20,000 snapshot copies"
            details: "{{ verify_snapshot_count.msg.num_records }} snapshot copies"
        when: verify_snapshot_count.msg.num_records > 20000

      tags: ["snapshot_count"]

    - name: Check for bad disks
      block:

      - include_tasks: tasks/health_checks/disks.yml

      tags: ["disks"]

    - name: Check for inconsistent volumes and validate deduplicated volumes 
      block: 
      
      - include_tasks: tasks/health_checks/inconsistent_volumes.yml

      - include_tasks: tasks/health_checks/dedupe_volumes.yml      

      tags: ["volumes"]
            
    - name: Check date and time 
      block: 

      - include_tasks: tasks/health_checks/date_time.yml      

      tags: ["datetime"]

    - name: Check for any offline objects
      block: 
      - include_tasks: tasks/health_checks/not_online.yml    
        vars: 
          online_object_check: "{{ item }}"
        loop: "{{ check_for_not_online }}" 
      tags: ["not_online"]

    - name: Check networking 
      block: 

      - include_tasks: tasks/health_checks/networking.yml    
     
      tags: ["networking"]  

    - name: Check what jobs are running (pre-upgrade only)
      block:


      - include_tasks: tasks/health_checks/running_jobs.yml    

      - name: Fail playbook if any jobs are running besides {{ allowed_jobs | join(',') }}
        include_tasks: tasks/add_failure.yml  
        vars: 
          failure: 
            issue: "No jobs should be running"
            details: "{{ verify_running_jobs.msg.records | dicts_to_table }}"
        when: verify_running_jobs.msg.num_records > 0 
                and 
              verify_running_jobs.msg.records | map(attribute='name') | difference(allowed_jobs) | length > 0

      tags: ["jobs"]
      when: post_upgrade_check != True

    - include_tasks: tasks/health_checks/ensure_ha.yml    

    - name: Summary of health checks 
      block: 

      - name: Get uptime (`system node show -fields uptime`) 
        netapp.ontap.na_ontap_rest_cli: 
          command: 'system/node'
          params: 
            fields: "model,uptime"
          verb: "GET"
        register: verify_uptime

      - name: Get current ONTAP Version
        netapp.ontap.na_ontap_rest_cli: 
          command: 'system/image'
          params: 
            iscurrent: "true"
            fields: "image,node,version"
          verb: "GET"
        register: verify_ontap_version

      - name: Set uptime_and_os
        ansible.builtin.set_fact: 
          uptime_and_os: "{{ verify_ontap_version.msg.records 
                            | community.general.lists_mergeby(verify_uptime.msg.records, 'node') }}"

      - name: Show uptime and current ONTAP Version
        include_tasks: tasks/add_log.yml
        vars: 
          log: 
            Current Uptime and OS: "{{ uptime_and_os | dicts_to_table }}"
      
      - name: Show summary_logs
        ansible.builtin.debug: 
          var: summary_logs 
          
      - name: Show summary_warnings
        ansible.builtin.fail: 
          msg: "See Above Warnings"
        when: summary_warnings | warning | length > 0 
        ignore_errors: True

      - name: Fail playbook if summary_failures
        ansible.builtin.fail: 
          msg: "{{ summary_failures }}"
        when: summary_failures | length > 0
      
      tags:
        - always


