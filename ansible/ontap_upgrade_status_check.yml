---
- name: "Determine where in the upgrade process each cluster is"
  hosts: "{{ clusters | default('localhost') }}"
  gather_facts: no
  connection: 'local'
  collections:
    - netapp.ontap
  module_defaults:
    group/netapp.ontap.netapp_ontap:
      hostname: "{{ ontap_hostname }}"
      username: "{{ ontap_username }}"
      password: "{{ ontap_password }}"
      https: "{{ https }}"
      validate_certs: "{{ validate_certs }}"
  vars_files: 
    - http_server.yml
  vars: 
    ontap_image: 9111P2_q_image.tgz
    ontap_package_version: 9.11.1P12
    ontap_package_url: "{{ http_server_url }}/{{ ontap_image }}"
    upgrade_status: "undetermined"
    nodes_need_new_image: []
    recent_maint_autosupports: []
  pre_tasks: 
  - include_tasks: tasks/check_package_url.yml
  tasks:
  - name: Get current cluster version (`netapp.ontap.na_ontap_rest_info`)
    include_tasks: tasks/rest_info.yml
    vars: 
      gather_subset:
        - cluster
      fields: 
        - "version"

  - name: Set current_ontap_version 
    ansible.builtin.set_fact: 
      current_ontap_version: "{{ ontap_rest_info['cluster']['version'] }}" 

  - name: Compare current version to target version ({{ ontap_package_version }})
    ansible.builtin.debug:
      msg: "Cluster reporting as {{ current_ontap_version | ontap_version }}, target version of {{ ontap_package_version }}"

  - name: Get failover status (`storage failover show`)  
    netapp.ontap.na_ontap_rest_cli: 
      command: 'storage/failover'
      params: 
        fields: "node,partner-name,partner-reason,enabled,possible,state-description,auto-giveback"
      verb: "GET"
    register: get_failover_status

  - name: Set failover_status
    ansible.builtin.set_fact: 
      failover_status: "{{ get_failover_status['msg']['records'] }}"

  - name: Get nodes (`netapp.ontap.na_ontap_rest_info`)
    include_tasks: tasks/rest_info.yml
    vars: 
      gather_subset:
      - cluster/nodes
      fields: 
        - "ha,state,version"

  - name: Set nodes_list 
    ansible.builtin.set_fact: 
      nodes_list: "{{ ontap_rest_info['cluster/nodes']['records'] }}"
      node_states: "{{ ontap_rest_info['cluster/nodes']['records'] | map(attribute='state') | unique }}"

    # don't bother with pre_upgrade checks if the nodes are not all up 
  - block: 
    - include_tasks: tasks/check_node_images.yml
    
    # If it hasn't been uploaded yet, these tasks will fail
    - block: 
      - include_tasks: tasks/get_image_name_for_package.yml 

      - include_tasks: tasks/check_if_new_package_is_default.yml
      when: nodes_need_new_image | length == 0

    - name: Check for 'MAINT=<n>h Starting' autosupports within the last 4 hours
      netapp.ontap.na_ontap_rest_cli: 
        command: 'system/node/autosupport/history'
        params: 
          fields: "subject,trigger,error,last-update,status"
          subject: "*ALL:MAINT=*h Starting*"
          last-update: ">120m"
        verb: "GET"
      register: get_recent_maint_autosupports

    - name: Set maint_autosupports
      ansible.builtin.set_fact: 
        recent_maint_autosupports: "{{ get_recent_maint_autosupports['msg']['records'] }}"

    when: node_states | length == 1

  # TODO - extensively test the following logic to close all edge cases and ensure it works as expected
  - block: 
    
    - name: Set upgrade_status to not_started if upgrade is not in progress
      ansible.builtin.set_fact: 
        upgrade_status: "not_started"
      when: 
        - failover_status | selectattr('possible','true') | selectattr('enabled','true') | selectattr('auto_giveback','true') | list | length == failover_status | length 
        - nodes_need_new_image | length == nodes_list | length 
    
    - name: Set upgrade_status to in_pre_upgrade if some or all pre-upgrade tasks are completed, 
            but failover status is normal, and all nodes still need new version
      ansible.builtin.set_fact: 
        upgrade_status: "in_pre_upgrade"
      when: 
        - failover_status | selectattr('auto_giveback', 'false') | list | length !=  failover_status | list | length
        - failover_status | selectattr('possible','true') | list | length == failover_status | length
        - (nodes_need_new_image | length > 0 or false in new_package_is_default)
        - ugrade_status != 'not_started'
 
    # end block
    when: 
      - current_ontap_version | ontap_version != ontap_package_version
      - nodes_list | map(attribute='version') | unique | length == 1

  - name: Set upgrade_status to upgrade_in_progress if failover status / node images are in a mixed state
    ansible.builtin.set_fact:
      upgrade_status: "upgrade_in_progress"
    when: failover_status | selectattr('auto_giveback', 'false') | list | length > 0 
          and nodes_need_new_image | length == 0 or node_states | length > 1


  - name: Set upgrade_status to completed if current ontap version == {{ ontap_package_version }} and failover status normal 
    ansible.builtin.set_fact:
      upgrade_status: "completed"
    when: failover_status | selectattr('possible','true') | selectattr('enabled','true') | selectattr('auto_giveback','true') | list | length == failover_status | length 
          and current_ontap_version | ontap_version == ontap_package_version 

  - name: Debug upgrade_status
    ansible.builtin.debug: 
      var: upgrade_status

  - name: Fail playbook if any clusters are "undetermined"
    ansible.builtin.fail: 
      msg: "{{ ontap_hostname }} has 'undetermined' as a status, and 
            therefore cannot be moved to the correct step in the workflow."
    when: upgrade_status == "undetermined"
