---
- name: Pre-upgrade tasks for ONTAP Upgrade
  hosts: "{{ clusters | default('localhost') }}"
  gather_facts: no
  connection: 'local'
  collections:
    - netapp.ontap
  vars_files: 
    - http_server.yml
  vars:
    ontap_image: 9101P15_q_image.tgz
    ontap_package_version: 9.10.1P15
    ontap_package_url: "{{ http_server_url }}/{{ ontap_image }}"
    node_image_no_update_in_progress_text: "There is no update/install in progress"
    node_image_update_failure_text: "Failed"
    node_image_update_success_text: ["Installation complete.","Success"]
  module_defaults:    
    group/netapp.ontap.netapp_ontap:      
      hostname: "{{ ontap_hostname }}"
      username: "{{ ontap_username }}"
      password: "{{ ontap_password }}"
      https: "{{ https }}"
      validate_certs: "{{ validate_certs }}"
  tasks:
  - block: 
    - name: Get cluster nodes info (`netapp.ontap.na_ontap_rest_info`)
      include_tasks: tasks/rest_info.yml
      vars: 
        gather_subset: 
          - cluster/nodes

    - name: Set nodes_list and nodes_info 
      ansible.builtin.set_fact:
        nodes_info: "{{ ontap_rest_info['cluster/nodes']['records'] }}"
        nodes_count: "{{ ontap_rest_info['cluster/nodes']['num_records'] }}"
        nodes_list: "{{ ontap_rest_info['cluster/nodes']['records'] | map(attribute='name') }}"
    tags: always

  - include_tasks: tasks/check_package_url.yml
    tags: ["image", "upload_check"]

  - name: Kick off autosupports 
    block: 
    - name: Set maint_hours based on number of nodes
      ansible.builtin.set_fact:
        maint_hours: "{{ (1.5 * nodes_count | int) | round | int }}"
    
    - name: Build autosupport_message variable
      ansible.builtin.set_fact:
        autosupport_message: >
          MAINT={{ maint_hours }}h Starting Non-Disruptive Upgrade to {{ ontap_package_version }}
    
    # https://kb.netapp.com/onprem/ontap/os/How_to_suppress_automatic_case_creation_during_scheduled_maintenance_windows_-_ONTAP_9
    - name: |
        Trigger maintenance autosupports
        (`netapp.ontap.na_ontap_autosupport_invoke` type: all message: '{{ autosupport_message }}')
      netapp.ontap.na_ontap_autosupport_invoke:
        autosupport_message: "{{ autosupport_message }}"
        type: all

    tags: ["autosupport"]

  - name: "Disable autogiveback"
    block: 
    - name: |
        Disable auto-giveback on all nodes 
        (`storage failover modify -auto-giveback false -nodes *`)  
      netapp.ontap.na_ontap_rest_cli: 
        command: 'storage/failover'
        params:   
          node: "*"
        body: 
          auto-giveback: "false"
        verb: "PATCH"
      register: update_autogiveback 

    - name: "Log of update_autogiveback"
      ansible.builtin.debug: 
        var: update_autogiveback

    - name: |
        Get auto-giveback status after update command
        (`storage failover show -fields auto-giveback`)
      netapp.ontap.na_ontap_rest_cli: 
        command: 'storage/failover'
        params: 
          fields: 'auto-giveback'
        verb: "GET"
      register: confirm_autogiveback

    - name: Set confirm_autogiveback var 
      ansible.builtin.debug: 
        var: confirm_autogiveback

    - name: Set autogiveback_still_true check 
      ansible.builtin.set_fact:
        autogiveback_still_true: "{{ confirm_autogiveback.msg.records | selectattr('auto_giveback', 'equalto', true) | list }}"

    - name: Fail playbook if auto-giveback is not equal to true on all nodes
      ansible.builtin.fail: 
        msg: "auto-giveback should be set to false on all nodes and is not. See logs above."
      when: autogiveback_still_true | length > 0

    tags: ["autogiveback"]
       
  - name: Get the image into each node's package repo
    block:
    - include_tasks: tasks/check_node_images.yml
    - block: 
      - name: log of nodes_need_new_image
        ansible.builtin.debug:
          var: nodes_need_new_image
        when: nodes_need_new_image is defined
      
      - name: >
          Check on status for each node 
          (system node image show-update-progress -node <node>) 
        netapp.ontap.na_ontap_rest_cli: 
          command: 'system/node/image/show-update-progress'
          body: 
            node: "{{ item }}"
          verb: "POST"
        register: check_if_node_image_upload_in_progress
        loop: "{{ nodes_need_new_image }}"

      - name: Build list of only nodes with no update already in progress 
        ansible.builtin.set_fact: 
          nodes_nothing_in_progress: "{{ check_if_node_image_upload_in_progress.results | 
                  selectattr('msg.cli_output', 'search', node_image_no_update_in_progress_text) | 
                  map(attribute='item')}}"

      - name: Log of nodes_nothing_in_progress
        ansible.builtin.debug: 
          var: nodes_nothing_in_progress

      - name: >
          "system node image update -node <node> -background true -package {{ ontap_package_url }} -replace-package true"
        netapp.ontap.na_ontap_rest_cli: 
          command: 'system/node/image/update'
          params: 
            node: "{{ item }}"
          body:   
            package: "{{ ontap_package_url }}"
            replace-package: true
            background: true
          verb: "PATCH"
        register: node_image_upload 
        loop: "{{ nodes_nothing_in_progress }}"

      - name: "Log of node_image_upload"
        ansible.builtin.debug: 
          var: node_image_upload
      
      - name: Give it 10 seconds
        ansible.builtin.pause: 
          seconds: 10 

      - name: >
          Check on status until we get success or failure
          (system node image show-update-progress)
        netapp.ontap.na_ontap_rest_cli: 
          command: 'system/node/image/show-update-progress'
          verb: "POST"
        register: node_image_upload_progress
        until: node_image_no_update_in_progress_text in node_image_upload_progress.msg.cli_output 
            or node_image_update_failure_text in node_image_upload_progress.msg.cli_output
        retries: 30
        delay: 20

      - name: 
        ansible.builtin.debug: 
          var: node_image_upload_progress

      - name: "Fail playbook if '{{ node_image_update_failure_text }}' is found in command return"
        ansible.builtin.fail: 
          msg: "{{ node_image_upload_progress.msg.cli_output }}"
        when: node_image_update_failure_text in node_image_upload_progress.msg.cli_output
      
      when: nodes_need_new_image is defined 

    tags: ["image", "upload_to_nodes"]

  - name: Set node images to {{ ontap_package_version }}
    block: 

    - include_tasks: tasks/get_image_name_for_package.yml 

    - name: system image modify -node * -image {{ new_image_name }} -isdefault true
      netapp.ontap.na_ontap_rest_cli: 
        command: 'system/node/image'
        params: 
          node: "*"
          image: "{{ new_image_name }}"
        body: 
          isdefault: true 
        verb: "PATCH"
      register: set_new_node_image

    - name: |
        Confirm {{ new_image_name }} {{ ontap_package_version }} is set to default
        (`system node image show`)
      netapp.ontap.na_ontap_rest_cli: 
        command: 'system/node/image'
        params: 
          fields: "image,node,version,version,isdefault,iscurrent"
        verb: "GET"
      register: verify_node_image_set

    - name: Log of verify_node_image_set
      ansible.builtin.debug: 
        var: verify_node_image_set.msg.records | dicts_to_table 

    - name: >
        Set new_package_is_default
        (verify_node_image_set -> filter by image == {{ new_image_name }} -> map by isdefault) 
      ansible.builtin.set_fact: 
        new_package_is_default: "{{ verify_node_image_set.msg.records | 
            selectattr('image', 'equalto', new_image_name) | 
            map(attribute='isdefault') }}"

    - name: log   
      ansible.builtin.debug:
        var: new_package_is_default

    - name: Fail playbook if {{ new_image_name }} isn't set to default on every node
      ansible.builtin.fail:
        msg: "{{ new_image_name }} must be set as the default image for all nodes"
      when: false in new_package_is_default

    tags: ["image", "set_node_image"]
