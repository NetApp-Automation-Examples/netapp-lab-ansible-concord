---
- name: Deploy Concord
  hosts: localhost
  # For some reason, GitHub keeps saying "GitHub repo does not exist..."
  # vars_prompt:
  #   - name: github_username
  #     prompt: What is your Github username?
  #     private: false
  #   - name: github_password
  #     prompt: What is your Github password?
  #   - name: github_otp
  #     prompt: What is your 2FA OTP?
  vars_files:
    - group_vars/ontap_clusters.yml 
  vars:
    default_admin_token: "{{ ontap_password | b64encode }}"
    concord_folder: "{{ playbook_dir }}/concord"
    concord_compose_folder: "{{ concord_folder }}/docker-images/compose"
    concord_conf_file: "{{ concord_compose_folder }}/concord.conf"
    concord_api_base: "http://localhost:8001/api/v1"
    concord_org: Default
    concord_deploy_key_secret: ConcordDeployKey
    concord_project: Project
    concord_ontap_creds_secret: 
      name: OntapCreds
      username: "{{ ontap_username }}"
      password: "{{ ontap_password }}"
    docker_user: "{{ lookup('env', 'DOCKER_USER') }}" 
    docker_password: "{{ lookup('env', 'DOCKER_PASSWORD') }}"
    github_owner: NetApp-Automation-Examples
    github_repo: netapp-lab-ansible-concord
    github_repo_url: git@github.com:NetApp-Automation-Examples/netapp-lab-ansible-concord.git
    github_repo_branch: main 
  module_defaults:    
    ansible.builtin.uri:
      body_format: json
      headers: 
        Authorization: "{{ default_admin_token }}"
  roles:
    - role: geerlingguy.docker
      when: ansible_distribution in ['Debian', 'CentOS', 'RedHat']
  tasks: 
  - name: Bring Concord up
    block: 
    # https://concord.walmartlabs.com/docs/getting-started/install/docker-compose.html
    - name: Fetch the concord docker compose quickstart repo
      ansible.builtin.git:
        repo: https://github.com/walmartlabs/concord.git
        dest: "{{ concord_folder }}"
        force: true

    #https://concord.walmartlabs.com/docs/getting-started/installation.html#default-admin-api-token
    - name: Put our default_admin_token in concord-server->db->changeLogParameters
      ansible.builtin.lineinfile:
        dest: "{{ concord_conf_file }}"
        insertafter:  "changeLogParameters {"
        state: present
        line: "\t\t\tdefaultAdminToken = \"{{ default_admin_token }}\""
    
    - name: Make sure docker is installed and running (Linux only)
      block: 
      - name: Ensure docker deamon is running 
        ansible.builtin.service:
          name: docker
          state: started
        become: true
      when: ansible_distribution in ['Debian', 'CentOS', 'RedHat']

    - name: Ensure colima is running on Mac
      ansible.builtin.command: colima start 
      when: ansible_distribution == 'MacOSX'

    - name: Log into DockerHub to avoid rate limit
      community.docker.docker_login:
        username: "{{ docker_user }}"
        password: "{{ docker_password }}"

    - name: Run docker-compose up 
      community.docker.docker_compose_v2:
        project_src: "{{ concord_compose_folder }}"
      register: docker_compose_up

    - name: Log
      ansible.builtin.debug: 
        var: docker_compose_up    
    
    tags: deploy
  
  - name: Configure Concord 
    block: 
    - name: Display API token
      ansible.builtin.debug:
        var: default_admin_token
    
    - name: Get deploy key 
      block: 
      - ansible.builtin.uri:
          url: "{{ concord_api_base }}/org/{{ concord_org }}/secret/{{ concord_deploy_key_secret }}/public"
          method: GET
          return_content: true
        register: get_deploy_key
        retries: 5
        delay: 10
        
      - name: Log get_deploy_key
        ansible.builtin.debug: 
          var: get_deploy_key

      - name: Set deploy_key 
        ansible.builtin.set_fact: 
          deploy_key: "{{ get_deploy_key.json.publicKey }}"
      rescue:           
      - name: Create deploy key
        ansible.builtin.uri:
          url: "{{ concord_api_base }}/org/{{ concord_org }}/secret"
          method: POST
          body_format: form-multipart
          body: 
            type: key_pair
            name: "{{ concord_deploy_key_secret }}"
          return_content: true
        register: create_deploy_key
      
      - name: Log create_deploy_key
        ansible.builtin.debug: 
          var: create_deploy_key

      - name: Set deploy_key
        ansible.builtin.set_fact:
          deploy_key: "{{ create_deploy_key.json.publicKey }}"

    - name: Check for {{ concord_ontap_creds_secret.name }}
      ansible.builtin.uri:
        url: "{{ concord_api_base }}/org/{{ concord_org }}/secret/{{ concord_ontap_creds_secret.name }}"
        method: GET
        return_content: true
        status_code: [200, 404]
      register: get_ontap_creds
    
    - name: Log get_ontap_creds
      ansible.builtin.debug: 
        var: get_ontap_creds

    - block: 
      - name: If get_ontap_creds.status == 404, create secret
        ansible.builtin.uri:
          url: "{{ concord_api_base }}/org/{{ concord_org }}/secret"
          method: POST
          body_format: form-multipart
          body:
            name: "{{ concord_ontap_creds_secret.name }}" 
            type: username_password
            username: "{{ concord_ontap_creds_secret.username }}" 
            password: "{{ concord_ontap_creds_secret.password }}"
          return_content: true
        register: create_ontap_creds

      - name: Log of create_ontap_creds
        ansible.builtin.debug: 
          var: create_ontap_creds
      when: get_ontap_creds.status == 404

    # See note at top of the file :'(
    # - name: Add read-only deploy key GitHub repository
    #   community.general.github_deploy_key:
    #     owner: "{{ github_owner }}"
    #     repo: "{{ github_repo }}"
    #     force: true
    #     name: "{{ concord_deploy_key_secret }}"
    #     key: "{{ deploy_key }}"
    #     read_only: true
    #     username: "{{ github_username }}"
    #     password: "{{ github_password }}"     
    #     otp: "{{ github_otp }}"

    - name: Check for project 
      ansible.builtin.uri:
        url: "{{ concord_api_base }}/org/{{ concord_org }}/project/{{ concord_project }}/cfg"
        method: GET
        return_content: true
        status_code: [200, 404]
      register: get_project
    
    - name: Log get_project
      ansible.builtin.debug: 
        var: get_project

    - block: 
      - name: If get_project.status == 404, create project
        ansible.builtin.uri:
          url: "{{ concord_api_base }}/org/{{ concord_org }}/project"
          method: POST
          body:
            name: "{{ concord_project }}" 
            repositories:
              repo: 
                url: "{{ github_repo_url }}"
                branch: "{{ github_repo_branch }}"
                secret: "{{ concord_deploy_key_secret }}"
          return_content: true
        register: create_project

      - name: Log of create_project
        ansible.builtin.debug: 
          var: create_project
      when: get_project.status == 404


    tags: configure
  
